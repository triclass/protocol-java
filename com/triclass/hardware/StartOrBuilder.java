// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hardware/course_start.proto

package com.triclass.hardware;

public interface StartOrBuilder extends
    // @@protoc_insertion_point(interface_extends:triclass.hardware.Start)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * 会议编号
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * 会议编号
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * 密码控制，如果密码有值，开启会议时需要输入对应的密码才可以加入会议
   * 此字段可以为空，如果为空，表示开启会议不需要密码
   * </pre>
   *
   * <code>.triclass.hardware.Password password = 2;</code>
   * @return Whether the password field is set.
   */
  boolean hasPassword();
  /**
   * <pre>
   * 密码控制，如果密码有值，开启会议时需要输入对应的密码才可以加入会议
   * 此字段可以为空，如果为空，表示开启会议不需要密码
   * </pre>
   *
   * <code>.triclass.hardware.Password password = 2;</code>
   * @return The password.
   */
  com.triclass.hardware.Password getPassword();
  /**
   * <pre>
   * 密码控制，如果密码有值，开启会议时需要输入对应的密码才可以加入会议
   * 此字段可以为空，如果为空，表示开启会议不需要密码
   * </pre>
   *
   * <code>.triclass.hardware.Password password = 2;</code>
   */
  com.triclass.hardware.PasswordOrBuilder getPasswordOrBuilder();

  /**
   * <pre>
   * 会议主题
   * </pre>
   *
   * <code>string subject = 3;</code>
   * @return The subject.
   */
  java.lang.String getSubject();
  /**
   * <pre>
   * 会议主题
   * </pre>
   *
   * <code>string subject = 3;</code>
   * @return The bytes for subject.
   */
  com.google.protobuf.ByteString
      getSubjectBytes();

  /**
   * <pre>
   * 时间戳，定义会议的开始时间和结束时间
   * </pre>
   *
   * <code>.triclass.timestamp.Timestamp timestamp = 4;</code>
   * @return Whether the timestamp field is set.
   */
  boolean hasTimestamp();
  /**
   * <pre>
   * 时间戳，定义会议的开始时间和结束时间
   * </pre>
   *
   * <code>.triclass.timestamp.Timestamp timestamp = 4;</code>
   * @return The timestamp.
   */
  com.triclass.Timestamp getTimestamp();
  /**
   * <pre>
   * 时间戳，定义会议的开始时间和结束时间
   * </pre>
   *
   * <code>.triclass.timestamp.Timestamp timestamp = 4;</code>
   */
  com.triclass.TimestampOrBuilder getTimestampOrBuilder();

  /**
   * <pre>
   * 直播推流地址
   * </pre>
   *
   * <code>repeated string push_url = 5;</code>
   * @return A list containing the pushUrl.
   */
  java.util.List<java.lang.String>
      getPushUrlList();
  /**
   * <pre>
   * 直播推流地址
   * </pre>
   *
   * <code>repeated string push_url = 5;</code>
   * @return The count of pushUrl.
   */
  int getPushUrlCount();
  /**
   * <pre>
   * 直播推流地址
   * </pre>
   *
   * <code>repeated string push_url = 5;</code>
   * @param index The index of the element to return.
   * @return The pushUrl at the given index.
   */
  java.lang.String getPushUrl(int index);
  /**
   * <pre>
   * 直播推流地址
   * </pre>
   *
   * <code>repeated string push_url = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the pushUrl at the given index.
   */
  com.google.protobuf.ByteString
      getPushUrlBytes(int index);
}
